diff -rupNEZbB minix_original/usr/include/minix/syslib.h minix_source/usr/include/minix/syslib.h
--- minix_original/usr/include/minix/syslib.h	2014-09-14 11:00:44.000000000 +0200
+++ minix_source/usr/include/minix/syslib.h	2022-05-28 15:39:41.971211182 +0200
@@ -38,7 +38,7 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int bucket);
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
 	quantum, int cpu);
 
diff -rupNEZbB minix_original/usr/src/include/unistd.h minix_source/usr/src/include/unistd.h
--- minix_original/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/include/unistd.h	2022-05-28 08:43:40.634364991 +0200
@@ -411,5 +411,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int set_bucket(int bucket_nr); /* so_2022 */
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB minix_original/usr/src/lib/libc/misc/Makefile.inc minix_source/usr/src/lib/libc/misc/Makefile.inc
--- minix_original/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/lib/libc/misc/Makefile.inc	2022-05-27 16:08:02.919375549 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c set_bucket.c
diff -rupNEZbB minix_original/usr/src/lib/libc/misc/set_bucket.c minix_source/usr/src/lib/libc/misc/set_bucket.c
--- minix_original/usr/src/lib/libc/misc/set_bucket.c	1970-01-01 01:00:00.000000000 +0100
+++ minix_source/usr/src/lib/libc/misc/set_bucket.c	2022-05-27 16:39:21.435251572 +0200
@@ -0,0 +1,11 @@
+#include <unistd.h>
+#include <lib.h>
+
+int set_bucket(int bucket_nr)
+{   
+    message m;
+    m.m1_i1 = getpid();
+    m.m1_i2 = bucket_nr;
+
+    return _syscall(PM_BASE, PM_SET_BUCKET, &m);
+}
diff -rupNEZbB minix_original/usr/src/minix/include/minix/callnr.h minix_source/usr/src/minix/include/minix/callnr.h
--- minix_original/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/callnr.h	2022-05-24 12:53:40.332740666 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SET_BUCKET       (PM_BASE  + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB minix_original/usr/src/minix/include/minix/com.h minix_source/usr/src/minix/include/minix/com.h
--- minix_original/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/com.h	2022-05-23 12:40:59.910465966 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SET_BUCKET	(SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB minix_original/usr/src/minix/include/minix/config.h minix_source/usr/src/minix/include/minix/config.h
--- minix_original/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/config.h	2022-05-30 13:49:57.612419017 +0200
@@ -59,11 +59,15 @@
 /* Scheduling priorities. Values must start at zero (highest
  * priority) and increment.
  */
-#define NR_SCHED_QUEUES   16	/* MUST equal minimum priority + 1 */
+#define INIT_BUCKET 0
+#define NO_BUCKET 0
+#define BUCKET_Q    8 
+#define LOWEST_BUCKET_Q (BUCKET_Q - 1)
+#define NR_BUCKETS  10
+#define NR_SCHED_QUEUES   (LOWEST_BUCKET_Q + NR_BUCKETS + 1)	/* MUST equal minimum priority + 1 */
 #define TASK_Q		   0	/* highest, used for kernel tasks */
-#define MAX_USER_Q  	   0    /* highest priority for user processes */   
-#define USER_Q  	  ((MIN_USER_Q - MAX_USER_Q) / 2 + MAX_USER_Q) /* default
-						(should correspond to nice 0) */
+#define MAX_USER_Q	  LOWEST_BUCKET_Q    /* highest priority for user processes */   
+#define USER_Q  	  LOWEST_BUCKET_Q
 #define MIN_USER_Q	  (NR_SCHED_QUEUES - 1)	/* minimum priority for user
 						   processes */
 /* default scheduling quanta */
diff -rupNEZbB minix_original/usr/src/minix/include/minix/ipc.h minix_source/usr/src/minix/include/minix/ipc.h
--- minix_original/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/ipc.h	2022-05-28 16:44:59.161757591 +0200
@@ -978,8 +978,9 @@ typedef struct {
 	int priority;
 	int quantum;
 	int cpu;
+	int bucket;
 
-	uint8_t padding[36];
+	uint8_t padding[32];
 } mess_lsys_krn_schedctl;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedctl);
 
@@ -988,8 +989,9 @@ typedef struct {
 	int quantum;
 	int priority;
 	int cpu;
+	int bucket;
 
-	uint8_t padding[40];
+	uint8_t padding[36];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -1588,6 +1590,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_nice);
 
 typedef struct {
+	endpoint_t endpoint;
+	int bucket;
+
+	uint8_t padding[48];
+} mess_pm_sched_scheduling_set_bucket;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_bucket);
+
+typedef struct {
 	int status;
 
 	uint8_t padding[52];
@@ -2208,6 +2218,7 @@ typedef struct {
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
+		mess_pm_sched_scheduling_set_bucket m_pm_sched_scheduling_set_bucket;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
 		mess_rs_pm_exec_restart	m_rs_pm_exec_restart;
diff -rupNEZbB minix_original/usr/src/minix/include/minix/syslib.h minix_source/usr/src/minix/include/minix/syslib.h
--- minix_original/usr/src/minix/include/minix/syslib.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/syslib.h	2022-05-28 15:42:47.344705394 +0200
@@ -38,9 +38,9 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int bucket); /*so_2022*/
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
-	quantum, int cpu);
+	quantum, int cpu, int bucket); /*so_2022*/
 
 /* Shorthands for sys_runctl() system call. */
 #define sys_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, 0)
diff -rupNEZbB minix_original/usr/src/minix/kernel/proc.c minix_source/usr/src/minix/kernel/proc.c
--- minix_original/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/proc.c	2022-05-30 13:19:36.914138397 +0200
@@ -59,8 +59,8 @@ static int deadlock(int function, regist
 	endpoint_t src_dst_e);
 static int try_async(struct proc *caller_ptr);
 static int try_one(struct proc *src_ptr, struct proc *dst_ptr);
-static struct proc * pick_proc(void);
-static void enqueue_head(struct proc *rp);
+static struct proc * pick_proc(void); /* so_2022 */
+static void enqueue_head(struct proc *rp); /* so_2022 */
 
 /* all idles share the same idle_priv structure */
 static struct priv idle_priv;
@@ -1535,7 +1535,16 @@ void enqueue(
  * This function can be used x-cpu as it always uses the queues of the cpu the
  * process is assigned to.
  */
-  int q = rp->p_priority;	 		/* scheduling queue to use */
+  int q;
+  if (LOWEST_BUCKET_Q <= rp->p_priority && rp->p_priority < NR_SCHED_QUEUES - 1) {
+	  q = LOWEST_BUCKET_Q + rp->p_bucket;
+	  //if (q == 8)
+	 	 //printf("(KERNEL, enqueue) ZMIENIONO[p_bucket: %d, p_priority: %d]", rp->p_bucket, rp->p_priority);
+  }
+  else {
+	  q = rp->p_priority;
+  }
+
   struct proc **rdy_head, **rdy_tail;
   
   assert(proc_is_runnable(rp));
@@ -1600,8 +1609,15 @@ void enqueue(
  */
 static void enqueue_head(struct proc *rp)
 {
-  const int q = rp->p_priority;	 		/* scheduling queue to use */
-
+  int q;
+  if (LOWEST_BUCKET_Q <= rp->p_priority && rp->p_priority < NR_SCHED_QUEUES - 1) {
+	  q = LOWEST_BUCKET_Q + rp->p_bucket;
+	  //if (q == 8)
+	 	 //printf("(KERNEL, enqueue) ZMIENIONO[p_bucket: %d, p_priority: %d]", rp->p_bucket, rp->p_priority);
+  }
+  else {
+	  q = rp->p_priority;
+  }
   struct proc **rdy_head, **rdy_tail;
 
   assert(proc_ptr_ok(rp));
@@ -1654,7 +1670,16 @@ void dequeue(struct proc *rp)
  * This function can operate x-cpu as it always removes the process from the
  * queue of the cpu the process is currently assigned to.
  */
-  int q = rp->p_priority;		/* queue to use */
+  int q;
+  if (LOWEST_BUCKET_Q <= rp->p_priority && rp->p_priority < NR_SCHED_QUEUES - 1) {
+	  q = LOWEST_BUCKET_Q + rp->p_bucket;
+	  //if (q == 8)
+	 	 //printf("(KERNEL, enqueue) ZMIENIONO[p_bucket: %d, p_priority: %d]", rp->p_bucket, rp->p_priority);
+  }
+  else {
+	  q = rp->p_priority;
+  }
+
   struct proc **xpp;			/* iterate over queue */
   struct proc *prev_xp;
   u64_t tsc, tsc_delta;
@@ -1711,6 +1736,7 @@ void dequeue(struct proc *rp)
 /*===========================================================================*
  *				pick_proc				     * 
  *===========================================================================*/
+static int next_bucket;
 static struct proc * pick_proc(void)
 {
 /* Decide who to run now.  A new process is selected an returned.
@@ -1728,7 +1754,7 @@ static struct proc * pick_proc(void)
    * If there are no processes ready to run, return NULL.
    */
   rdy_head = get_cpulocal_var(run_q_head);
-  for (q=0; q < NR_SCHED_QUEUES; q++) {	
+  for (q=0; q < LOWEST_BUCKET_Q; q++) {		
 	if(!(rp = rdy_head[q])) {
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
@@ -1738,6 +1764,21 @@ static struct proc * pick_proc(void)
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
 	return rp;
   }
+
+  for (int i = 0; i < NR_BUCKETS; i++) {
+	q = next_bucket + LOWEST_BUCKET_Q;
+	next_bucket = (next_bucket + 1) % NR_BUCKETS;
+	if(!(rp = rdy_head[q])) {
+		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
+		continue;
+	}
+	assert(proc_is_runnable(rp));
+    if (priv(rp)->s_flags & BILLABLE)	 	
+      get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
+	//if (q > 7) printf("[PICKPROC] q: %d, next_bucket: %d\n", q, next_bucket);
+    return rp;
+  }
+
   return NULL;
 }
 
diff -rupNEZbB minix_original/usr/src/minix/kernel/proc.h minix_source/usr/src/minix/kernel/proc.h
--- minix_original/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/proc.h	2022-05-28 19:33:00.084963400 +0200
@@ -28,6 +28,7 @@ struct proc {
   volatile u32_t p_misc_flags;	/* flags that do not suspend the process */
 
   char p_priority;		/* current process priority */
+  char p_bucket; /* bucket used in scheduling */
   u64_t p_cpu_time_left;	/* time left to use the cpu */
   unsigned p_quantum_size_ms;	/* assigned time quantum in ms
 				   FIXME remove this */
diff -rupNEZbB minix_original/usr/src/minix/kernel/proto.h minix_source/usr/src/minix/kernel/proto.h
--- minix_original/usr/src/minix/kernel/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/proto.h	2022-05-28 16:00:21.963797556 +0200
@@ -58,8 +58,8 @@ int has_pending_notify(struct proc * cal
 int has_pending_asend(struct proc * caller, int src_p);
 void unset_notify_pending(struct proc * caller, int src_p);
 int mini_notify(const struct proc *src, endpoint_t dst);
-void enqueue(struct proc *rp);
-void dequeue(struct proc *rp);
+void enqueue(struct proc *rp); /* so_2022 */
+void dequeue(struct proc *rp); /* so_2022 */
 void switch_to_user(void);
 void arch_proc_reset(struct proc *rp);
 void arch_proc_setcontext(struct proc *rp, struct stackframe_s *state,
@@ -99,7 +99,7 @@ void system_init(void);
 void clear_endpoint(struct proc *rc);
 void clear_ipc_refs(struct proc *rc, int caller_ret);
 void kernel_call_resume(struct proc *p);
-int sched_proc(struct proc *rp, int priority, int quantum, int cpu);
+int sched_proc(struct proc *rp, int priority, int quantum, int cpu, int bucket); /* so_2022 */
 
 /* system/do_vtimer.c */
 void vtimer_check(struct proc *rp);
diff -rupNEZbB minix_original/usr/src/minix/kernel/system/do_schedctl.c minix_source/usr/src/minix/kernel/system/do_schedctl.c
--- minix_original/usr/src/minix/kernel/system/do_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system/do_schedctl.c	2022-05-28 15:47:05.735127246 +0200
@@ -8,7 +8,7 @@ int do_schedctl(struct proc * caller, me
 {
 	struct proc *p;
 	uint32_t flags;
-	int priority, quantum, cpu;
+	int priority, quantum, cpu, bucket;
 	int proc_nr;
 	int r;
 
@@ -32,9 +32,10 @@ int do_schedctl(struct proc * caller, me
 		priority = m_ptr->m_lsys_krn_schedctl.priority;
 		quantum = m_ptr->m_lsys_krn_schedctl.quantum;
 		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
+		bucket = -1;
 
 		/* Try to schedule the process. */
-		if((r = sched_proc(p, priority, quantum, cpu) != OK))
+		if((r = sched_proc(p, priority, quantum, cpu, bucket) != OK))
 			return r;
 		p->p_scheduler = NULL;
 	} else {
diff -rupNEZbB minix_original/usr/src/minix/kernel/system/do_schedule.c minix_source/usr/src/minix/kernel/system/do_schedule.c
--- minix_original/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system/do_schedule.c	2022-05-28 15:46:02.171673642 +0200
@@ -9,7 +9,7 @@ int do_schedule(struct proc * caller, me
 {
 	struct proc *p;
 	int proc_nr;
-	int priority, quantum, cpu;
+	int priority, quantum, cpu, bucket;
 
 	if (!isokendpt(m_ptr->m_lsys_krn_schedule.endpoint, &proc_nr))
 		return EINVAL;
@@ -24,6 +24,7 @@ int do_schedule(struct proc * caller, me
 	priority = m_ptr->m_lsys_krn_schedule.priority;
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
+	bucket = m_ptr->m_lsys_krn_schedule.bucket;
 
-	return sched_proc(p, priority, quantum, cpu);
+	return sched_proc(p, priority, quantum, cpu, bucket);
 }
diff -rupNEZbB minix_original/usr/src/minix/kernel/system.c minix_source/usr/src/minix/kernel/system.c
--- minix_original/usr/src/minix/kernel/system.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system.c	2022-05-30 13:06:30.199919568 +0200
@@ -621,7 +621,8 @@ void kernel_call_resume(struct proc *cal
 int sched_proc(struct proc *p,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+      int bucket)
 {
 	/* Make sure the values given are within the allowed range.*/
 	if ((priority < TASK_Q && priority != -1) || priority > NR_SCHED_QUEUES)
@@ -630,6 +631,9 @@ int sched_proc(struct proc *p,
 	if (quantum < 1 && quantum != -1)
 		return(EINVAL);
 
+  if (bucket != -1)
+    p->p_bucket = bucket;
+
 #ifdef CONFIG_SMP
 	if ((cpu < 0 && cpu != -1) || (cpu > 0 && (unsigned) cpu >= ncpus))
 		return(EINVAL);
diff -rupNEZbB minix_original/usr/src/minix/kernel/system.h minix_source/usr/src/minix/kernel/system.h
--- minix_original/usr/src/minix/kernel/system.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system.h	2022-05-28 16:00:59.040727118 +0200
@@ -200,8 +200,8 @@ int do_setmcontext(struct proc * caller,
 #define do_setmcontext NULL
 #endif
 
-int do_schedule(struct proc * caller, message *m_ptr);
-int do_schedctl(struct proc * caller, message *m_ptr);
+int do_schedule(struct proc * caller, message *m_ptr); /* so_2022 */
+int do_schedctl(struct proc * caller, message *m_ptr); /* so_2022 */
 
 int do_statectl(struct proc * caller, message *m_ptr);
 #if ! USE_STATECTL
diff -rupNEZbB minix_original/usr/src/minix/lib/libsys/sched_start.c minix_source/usr/src/minix/lib/libsys/sched_start.c
--- minix_original/usr/src/minix/lib/libsys/sched_start.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/lib/libsys/sched_start.c	2022-05-30 13:06:52.290051186 +0200
@@ -73,7 +73,7 @@ int sched_start(endpoint_t scheduler_e,
 	/* The KERNEL must schedule this process. */
 	if(scheduler_e == KERNEL) {
 		if ((rv = sys_schedctl(SCHEDCTL_FLAG_KERNEL, 
-			schedulee_e, maxprio, quantum, cpu)) != OK) {
+			schedulee_e, maxprio, quantum, cpu, NO_BUCKET)) != OK) {
 			return rv;
 		}
 		*newscheduler_e = scheduler_e;
diff -rupNEZbB minix_original/usr/src/minix/lib/libsys/sys_schedctl.c minix_source/usr/src/minix/lib/libsys/sys_schedctl.c
--- minix_original/usr/src/minix/lib/libsys/sys_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/lib/libsys/sys_schedctl.c	2022-05-28 15:41:52.881309919 +0200
@@ -1,7 +1,7 @@
 #include "syslib.h"
 
 int sys_schedctl(uint32_t flags, endpoint_t proc_ep, int priority, int quantum,
-	int cpu)
+	int cpu, int bucket)
 {
 	message m;
 
@@ -10,6 +10,7 @@ int sys_schedctl(uint32_t flags, endpoin
 	m.m_lsys_krn_schedctl.priority = priority;
 	m.m_lsys_krn_schedctl.quantum = quantum;
 	m.m_lsys_krn_schedctl.cpu = cpu;
+	m.m_lsys_krn_schedctl.bucket = bucket;
 
 	return(_kernel_call(SYS_SCHEDCTL, &m));
 }
diff -rupNEZbB minix_original/usr/src/minix/lib/libsys/sys_schedule.c minix_source/usr/src/minix/lib/libsys/sys_schedule.c
--- minix_original/usr/src/minix/lib/libsys/sys_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/lib/libsys/sys_schedule.c	2022-05-28 15:42:24.108010856 +0200
@@ -3,7 +3,8 @@
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+			int bucket)
 {
 	message m;
 
@@ -11,5 +12,7 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+	m.m_lsys_krn_schedule.bucket = bucket;
+	
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff -rupNEZbB minix_original/usr/src/minix/servers/pm/proto.h minix_source/usr/src/minix/servers/pm/proto.h
--- minix_original/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/pm/proto.h	2022-05-27 16:41:48.949175133 +0200
@@ -51,6 +51,8 @@ int do_getrusage(void);
 void sched_init(void);
 int sched_start_user(endpoint_t ep, struct mproc *rmp);
 int sched_nice(struct mproc *rmp, int nice);
+int sched_set_bucket(struct mproc *rmp, int bucket_nr); /* so_2022 */
+int do_set_bucket(void); /* so_2022 */
 
 /* profile.c */
 int do_sprofile(void);
diff -rupNEZbB minix_original/usr/src/minix/servers/pm/schedule.c minix_source/usr/src/minix/servers/pm/schedule.c
--- minix_original/usr/src/minix/servers/pm/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/pm/schedule.c	2022-05-30 12:02:46.913670863 +0200
@@ -110,3 +110,46 @@ int sched_nice(struct mproc *rmp, int ni
 
 	return (OK);
 }
+
+int sched_set_bucket(struct mproc *rmp, int bucket_nr)
+{
+	int rv;
+    message m; /* message to be sent to sched */
+	
+    /* check if bucket_nr is legal */
+    if (bucket_nr < 0 || NR_BUCKETS - 1 < bucket_nr) {
+        return (EINVAL);
+    }
+
+    /* check if the process is scheduled directly by the kernel */
+    if (rmp->mp_scheduler == KERNEL || rmp->mp_scheduler == NONE) {
+        return (EPERM);
+    }
+	/* check if sched is actually the scheduler */
+    if (rmp->mp_scheduler != SCHED_PROC_NR) {
+        return (EPERM);
+    }
+
+    m.m_pm_sched_scheduling_set_bucket.endpoint	= rmp->mp_endpoint;
+	m.m_pm_sched_scheduling_set_bucket.bucket	= bucket_nr;
+	if ((rv = _taskcall(rmp->mp_scheduler, SCHEDULING_SET_BUCKET, &m))) {
+		return rv;
+	}
+
+	return (OK);
+}
+
+int do_set_bucket(void)
+{
+	int arg_who = m_in.m1_i1;
+    int arg_bucket_nr = m_in.m1_i2;
+	struct mproc *rmp;
+
+	if (arg_who == 0)
+		rmp = mp;
+	else 
+		if ((rmp = find_proc(arg_who)) == NULL)
+			return(ESRCH);
+
+    return sched_set_bucket(rmp, arg_bucket_nr);
+}
diff -rupNEZbB minix_original/usr/src/minix/servers/pm/table.c minix_source/usr/src/minix/servers/pm/table.c
--- minix_original/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/pm/table.c	2022-05-27 15:59:57.692392862 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_SET_BUCKET)	= do_set_bucket,	/* set_bucket(2) */
 };
diff -rupNEZbB minix_original/usr/src/minix/servers/sched/main.c minix_source/usr/src/minix/servers/sched/main.c
--- minix_original/usr/src/minix/servers/sched/main.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/main.c	2022-05-27 16:42:18.292636324 +0200
@@ -70,6 +70,9 @@ int main(void)
 		case SCHEDULING_SET_NICE:
 			result = do_nice(&m_in);
 			break;
+		case SCHEDULING_SET_BUCKET:
+			result = do_set_bucket(&m_in);
+			break;
 		case SCHEDULING_NO_QUANTUM:
 			/* This message was sent from the kernel, don't reply */
 			if (IPC_STATUS_FLAGS_TEST(ipc_status,
diff -rupNEZbB minix_original/usr/src/minix/servers/sched/proto.h minix_source/usr/src/minix/servers/sched/proto.h
--- minix_original/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/proto.h	2022-05-30 13:45:48.011039845 +0200
@@ -4,15 +4,16 @@ struct schedproc;
 #include <minix/timers.h>
 
 /* main.c */
-int main(void);
+int main(void); /* so_2022 */
 void setreply(int proc_nr, int result);
 
 /* schedule.c */
-int do_noquantum(message *m_ptr);
-int do_start_scheduling(message *m_ptr);
+int do_noquantum(message *m_ptr); /* so_2022 */
+int do_start_scheduling(message *m_ptr); /* so_2022 */
 int do_stop_scheduling(message *m_ptr);
-int do_nice(message *m_ptr);
-void init_scheduling(void);
+int do_nice(message *m_ptr); /* so_2022 */
+int do_set_bucket(message *m_ptr); /* so_2022 */
+void init_scheduling(void); /* so_2022 */
 
 /* utility.c */
 int no_sys(int who_e, int call_nr);
diff -rupNEZbB minix_original/usr/src/minix/servers/sched/schedproc.h minix_source/usr/src/minix/servers/sched/schedproc.h
--- minix_original/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/schedproc.h	2022-05-28 17:18:01.679126039 +0200
@@ -28,6 +28,7 @@ EXTERN struct schedproc {
 	/* User space scheduling */
 	unsigned max_priority;	/* this process' highest allowed priority */
 	unsigned priority;		/* the process' current priority */
+	int bucket; /* the process' bucket used in scheduling */
 	unsigned time_slice;		/* this process's time slice */
 	unsigned cpu;		/* what CPU is the process running on */
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
diff -rupNEZbB minix_original/usr/src/minix/servers/sched/schedule.c minix_source/usr/src/minix/servers/sched/schedule.c
--- minix_original/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/schedule.c	2022-05-30 13:45:35.837638340 +0200
@@ -19,23 +19,25 @@ static unsigned balance_timeout;
 
 #define BALANCE_TIMEOUT	5 /* how often to balance queues in seconds */
 
-static int schedule_process(struct schedproc * rmp, unsigned flags);
-static void balance_queues(minix_timer_t *tp);
+static int schedule_process(struct schedproc * rmp, unsigned flags); /* so_2022 */
+static void balance_queues(minix_timer_t *tp); /* so_2022 */
 
 #define SCHEDULE_CHANGE_PRIO	0x1
 #define SCHEDULE_CHANGE_QUANTUM	0x2
 #define SCHEDULE_CHANGE_CPU	0x4
+#define SCHEDULE_CHANGE_BUCKET	0x8
 
 #define SCHEDULE_CHANGE_ALL	(	\
 		SCHEDULE_CHANGE_PRIO	|	\
 		SCHEDULE_CHANGE_QUANTUM	|	\
-		SCHEDULE_CHANGE_CPU		\
+		SCHEDULE_CHANGE_CPU		|   \
+		SCHEDULE_CHANGE_BUCKET \
 		)
 
 #define schedule_process_local(p)	\
-	schedule_process(p, SCHEDULE_CHANGE_PRIO | SCHEDULE_CHANGE_QUANTUM)
+	schedule_process(p, SCHEDULE_CHANGE_PRIO | SCHEDULE_CHANGE_QUANTUM | SCHEDULE_CHANGE_BUCKET)
 #define schedule_process_migrate(p)	\
-	schedule_process(p, SCHEDULE_CHANGE_CPU)
+	schedule_process(p, SCHEDULE_CHANGE_CPU | SCHEDULE_CHANGE_BUCKET)
 
 #define CPU_DEAD	-1
 
@@ -99,9 +101,9 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
-	}
+	// if (rmp->priority < MIN_USER_Q) {
+	// 	rmp->priority += 1; /* lower priority */
+	// }
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
@@ -176,6 +178,7 @@ int do_start_scheduling(message *m_ptr)
 		   process scheduled, and the parent of itself. */
 		rmp->priority   = USER_Q;
 		rmp->time_slice = DEFAULT_USER_TIME_SLICE;
+		rmp->bucket = INIT_BUCKET;
 
 		/*
 		 * Since kernel never changes the cpu of a process, all are
@@ -197,18 +200,20 @@ int do_start_scheduling(message *m_ptr)
 		 * from the parent */
 		rmp->priority   = rmp->max_priority;
 		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
+		rmp->bucket = NO_BUCKET;
 		break;
 		
 	case SCHEDULING_INHERIT:
-		/* Inherit current priority and time slice from parent. Since there
-		 * is currently only one scheduler scheduling the whole system, this
-		 * value is local and we assert that the parent endpoint is valid */
+		/* Inherit current priority, time slice and bucket from parent. 
+		 * Since thereis currently only one scheduler scheduling the whole system, 
+		 * this value is local and we assert that the parent endpoint is valid */
 		if ((rv = sched_isokendpt(m_ptr->m_lsys_sched_scheduling_start.parent,
 				&parent_nr_n)) != OK)
 			return rv;
 
 		rmp->priority = schedproc[parent_nr_n].priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+		rmp->bucket = schedproc[parent_nr_n].bucket;
 		break;
 		
 	default: 
@@ -218,7 +223,7 @@ int do_start_scheduling(message *m_ptr)
 
 	/* Take over scheduling the process. The kernel reply message populates
 	 * the processes current priority and its time slice */
-	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0)) != OK) {
+	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0, -1)) != OK) { //TODO: dobrze?
 		printf("Sched: Error taking over scheduling for %d, kernel said %d\n",
 			rmp->endpoint, rv);
 		return rv;
@@ -256,39 +261,77 @@ int do_start_scheduling(message *m_ptr)
  *===========================================================================*/
 int do_nice(message *m_ptr)
 {
+	// struct schedproc *rmp;
+	// int rv;
+	// int proc_nr_n;
+	// unsigned new_q, old_q, old_max_q;
+
+	// /* check who can send you requests */
+	// if (!accept_message(m_ptr))
+	// 	return EPERM;
+
+	// if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
+	// 	printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+	// 	"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+	// 	return EBADEPT;
+	// }
+
+	// rmp = &schedproc[proc_nr_n];
+	// new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
+	// if (new_q >= NR_SCHED_QUEUES) {
+	// 	return EINVAL;
+	// }
+
+	// /* Store old values, in case we need to roll back the changes */
+	// old_q     = rmp->priority;
+	// old_max_q = rmp->max_priority;
+
+	// /* Update the proc entry and reschedule the process */
+	// rmp->max_priority = rmp->priority = new_q;
+
+	// if ((rv = schedule_process_local(rmp)) != OK) {
+	// 	/* Something went wrong when rescheduling the process, roll
+	// 	 * back the changes to proc struct */
+	// 	rmp->priority     = old_q;
+	// 	rmp->max_priority = old_max_q;
+	// }
+
+	// return rv;
+
+	/* `nice` shouldn't affect user processes at all */
+	return (ENOSYS);
+}
+
+int do_set_bucket(message *m_ptr)
+{
 	struct schedproc *rmp;
 	int rv;
 	int proc_nr_n;
-	unsigned new_q, old_q, old_max_q;
+	unsigned new_bucket, old_bucket;
 
 	/* check who can send you requests */
 	if (!accept_message(m_ptr))
 		return EPERM;
 
-	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
+	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_bucket.endpoint, &proc_nr_n) != OK) {
 		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
-		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+		"%d\n", m_ptr->m_pm_sched_scheduling_set_bucket.endpoint);
 		return EBADEPT;
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
-	if (new_q >= NR_SCHED_QUEUES) {
-		return EINVAL;
-	}
+	new_bucket = m_ptr->m_pm_sched_scheduling_set_bucket.bucket;
 
 	/* Store old values, in case we need to roll back the changes */
-	old_q     = rmp->priority;
-	old_max_q = rmp->max_priority;
+	old_bucket = rmp->bucket;
 
 	/* Update the proc entry and reschedule the process */
-	rmp->max_priority = rmp->priority = new_q;
+	rmp->bucket = new_bucket;
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		/* Something went wrong when rescheduling the process, roll
 		 * back the changes to proc struct */
-		rmp->priority     = old_q;
-		rmp->max_priority = old_max_q;
+		rmp->bucket = old_bucket;
 	}
 
 	return rv;
@@ -300,7 +343,7 @@ int do_nice(message *m_ptr)
 static int schedule_process(struct schedproc * rmp, unsigned flags)
 {
 	int err;
-	int new_prio, new_quantum, new_cpu;
+	int new_prio, new_quantum, new_cpu, new_bucket;
 
 	pick_cpu(rmp);
 
@@ -319,8 +362,13 @@ static int schedule_process(struct sched
 	else
 		new_cpu = -1;
 
+	if (flags & SCHEDULE_CHANGE_BUCKET)
+		new_bucket = rmp->bucket;
+	else
+		new_bucket = -1;
+
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_cpu, new_bucket)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -335,9 +383,9 @@ static int schedule_process(struct sched
 
 void init_scheduling(void)
 {
-	balance_timeout = BALANCE_TIMEOUT * sys_hz();
-	init_timer(&sched_timer);
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+	// balance_timeout = BALANCE_TIMEOUT * sys_hz();
+	// init_timer(&sched_timer);
+	// set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
 
 /*===========================================================================*
@@ -351,17 +399,17 @@ void init_scheduling(void)
  */
 static void balance_queues(minix_timer_t *tp)
 {
-	struct schedproc *rmp;
-	int proc_nr;
+	// struct schedproc *rmp;
+	// int proc_nr;
 
-	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
-		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
-				rmp->priority -= 1; /* increase priority */
-				schedule_process_local(rmp);
-			}
-		}
-	}
+	// for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
+	// 	if (rmp->flags & IN_USE) {
+	// 		if (rmp->priority > rmp->max_priority) {
+	// 			rmp->priority -= 1; /* increase priority */
+	// 			schedule_process_local(rmp);
+	// 		}
+	// 	}
+	// }
 
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+	// set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
